Star transformation enables specific types of queries to avoid accessing large portions of big fact tables.

Star transformation requires defining several indexes, which in an actively updated table can have overhead. With table expansion, you can define indexes on only the inactive partitions so that the optimizer can consider star transformation on only the indexed portions of the table.

Assumptions

This scenario assumes the following:

You query the same schema used in "Star Transformation: Scenario".

The last partition of sales is actively being updated, as is often the case with time-partitioned tables.

You want the optimizer to take advantage of table expansion.

To take advantage of table expansion in a star query:

Disable the indexes on the last partition as follows:


Copy
ALTER INDEX sales_channel_bix MODIFY PARTITION sales_q4_2003 UNUSABLE;
ALTER INDEX sales_cust_bix MODIFY PARTITION sales_q4_2003 UNUSABLE;
Execute the following star query:


Copy
SELECT t.calendar_quarter_desc, SUM(s.amount_sold) sales_amount 
FROM   sales s, times t, customers c, channels ch
WHERE  s.time_id = t.time_id 
AND    s.cust_id = c.cust_id 
AND    s.channel_id = ch.channel_id 
AND    c.cust_state_province = 'CA' 
AND    ch.channel_desc = 'Internet'
AND    t.calendar_quarter_desc IN ('1999-01','1999-02') 
GROUP BY t.calendar_quarter_desc;
Query the cursor using DBMS_XPLAN, which shows the following plan:


Copy
---------------------------------------------------------------------------
|Id| Operation                          | Name            | Pstart| Pstop |
---------------------------------------------------------------------------
| 0| SELECT STATEMENT                   |                 |       |       |
| 1|  HASH GROUP BY                     |                 |       |       |
| 2|   VIEW                             |VW_TE_14         |       |       |
| 3|    UNION-ALL                       |                 |       |       |
| 4|     HASH JOIN                      |                 |       |       |
| 5|      TABLE ACCESS FULL             |TIMES            |       |       |
| 6|      VIEW                          |VW_ST_1319B6D8   |       |       |
| 7|       NESTED LOOPS                 |                 |       |       |
| 8|        PARTITION RANGE SUBQUERY    |                 |KEY(SQ)|KEY(SQ)|
| 9|         BITMAP CONVERSION TO ROWIDS|                 |       |       |
|10|          BITMAP AND                |                 |       |       |
|11|           BITMAP MERGE             |                 |       |       |
|12|            BITMAP KEY ITERATION    |                 |       |       |
|13|             BUFFER SORT            |                 |       |       |
|14|              TABLE ACCESS FULL     |CHANNELS         |       |       |
|15|             BITMAP INDEX RANGE SCAN|SALES_CHANNEL_BIX|KEY(SQ)|KEY(SQ)|
|16|           BITMAP MERGE             |                 |       |       |
|17|            BITMAP KEY ITERATION    |                 |       |       |
|18|             BUFFER SORT            |                 |       |       |
|19|              TABLE ACCESS FULL     |TIMES            |       |       |
|20|             BITMAP INDEX RANGE SCAN|SALES_TIME_BIX   |KEY(SQ)|KEY(SQ)|
|21|           BITMAP MERGE             |                 |       |       |
|22|            BITMAP KEY ITERATION    |                 |       |       |
|23|             BUFFER SORT            |                 |       |       |
|24|              TABLE ACCESS FULL     |CUSTOMERS        |       |       |
|25|             BITMAP INDEX RANGE SCAN|SALES_CUST_BIX   |KEY(SQ)|KEY(SQ)|
|26|        TABLE ACCESS BY USER ROWID  |SALES            | ROWID | ROWID |
|27|     NESTED LOOPS                   |                 |       |       |
|28|      NESTED LOOPS                  |                 |       |       |
|29|       NESTED LOOPS                 |                 |       |       |
|30|        NESTED LOOPS                |                 |       |       |
|31|         PARTITION RANGE SINGLE     |                 |    28 |    28 |
|32|          TABLE ACCESS FULL         |SALES            |    28 |    28 |
|33|         TABLE ACCESS BY INDEX ROWID|CHANNELS         |       |       |
|34|          INDEX UNIQUE SCAN         |CHANNELS_PK      |       |       |
|35|        TABLE ACCESS BY INDEX ROWID |CUSTOMERS        |       |       |
|36|         INDEX UNIQUE SCAN          |CUSTOMERS_PK     |       |       |
|37|       INDEX UNIQUE SCAN            |TIMES_PK         |       |       |
|38|      TABLE ACCESS BY INDEX ROWID   |TIMES            |       |       |
---------------------------------------------------------------------------
The preceding plan uses table expansion. The UNION ALL branch that is accessing every partition except the last partition uses star transformation. Because the indexes on partition 28 are disabled, the database accesses the final partition using a full table scan.