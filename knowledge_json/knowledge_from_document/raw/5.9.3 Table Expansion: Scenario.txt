The optimizer keeps track of which partitions must be accessed from each table, based on predicates that appear in the query. Partition pruning enables the optimizer to use table expansion to generate more optimal plans.

Assumptions

This scenario assumes the following:

You want to run a star query against the sh.sales table, which is range-partitioned on the time_id column.

You want to disable indexes on specific partitions to see the benefits of table expansion.

To use table expansion:

Log in to the database as the sh user.

Run the following query:


Copy
SELECT * 
FROM   sales 
WHERE  time_id >= TO_DATE('2000-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS') 
AND    prod_id = 38;
Explain the plan by querying DBMS_XPLAN:


Copy
SET LINESIZE 150
SET PAGESIZE 0
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY_CURSOR(format => 'BASIC,PARTITION'));
As shown in the Pstart and Pstop columns in the following plan, the optimizer determines from the filter that only 16 of the 28 partitions in the table must be accessed:


Copy
Plan hash value: 3087065703

------------------------------------------------------------------------
|Id| Operation                                  | Name    |Pstart|Pstop|
------------------------------------------------------------------------
| 0| SELECT STATEMENT                           |              |  |    |
| 1|  PARTITION RANGE ITERATOR                  |              |13| 28 |
| 2|   TABLE ACCESS BY LOCAL INDEX ROWID BATCHED| SALES        |13| 28 |
| 3|    BITMAP CONVERSION TO ROWIDS             |              |  |    |
|*4|     BITMAP INDEX SINGLE VALUE              |SALES_PROD_BIX|13| 28 |
------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   4 - access("PROD_ID"=38)
After the optimizer has determined the partitions to be accessed, it considers any index that is usable on all of those partitions. In the preceding plan, the optimizer chose to use the sales_prod_bix bitmap index.

Disable the index on the SALES_1995 partition of the sales table:


Copy
ALTER INDEX sales_prod_bix MODIFY PARTITION sales_1995 UNUSABLE;
The preceding DDL disables the index on partition 1, which contains all sales from before 1996.

Note:You can obtain the partition information by querying the USER_IND_PARTITIONS view.
Execute the query of sales again, and then query DBMS_XPLAN to obtain the plan.

The output shows that the plan did not change:


Copy
Plan hash value: 3087065703

------------------------------------------------------------------------
|Id| Operation                                  | Name     |Pstart|Pstop
------------------------------------------------------------------------
| 0| SELECT STATEMENT                           |               |  |   |
| 1|  PARTITION RANGE ITERATOR                  |               |13|28 |
| 2|   TABLE ACCESS BY LOCAL INDEX ROWID BATCHED| SALES         |13|28 |
| 3|    BITMAP CONVERSION TO ROWIDS             |               |  |   |
|*4|     BITMAP INDEX SINGLE VALUE              | SALES_PROD_BIX|13|28 |
------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   4 - access("PROD_ID"=38)
The plan is the same because the disabled index partition is not relevant to the query. If all partitions that the query accesses are indexed, then the database can answer the query using the index. Because the query only accesses partitions 16 through 28, disabling the index on partition 1 does not affect the plan.

Disable the indexes for partition 28 (SALES_Q4_2003), which is a partition that the query needs to access:


Copy
ALTER INDEX sales_prod_bix MODIFY PARTITION sales_q4_2003 UNUSABLE;
ALTER INDEX sales_time_bix MODIFY PARTITION sales_q4_2003 UNUSABLE;
By disabling the indexes on a partition that the query does need to access, the query can no longer use this index (without table expansion).

Query the plan using DBMS_XPLAN.

As shown in the following plan, the optimizer does not use the index:


Copy
Plan hash value: 3087065703
 
------------------------------------------------------------------------
| Id| Operation                              | Name        |Pstart|Pstop
------------------------------------------------------------------------
| 0 | SELECT STATEMENT                       |                |   |    |
| 1 |  PARTITION RANGE ITERATOR              |                |13 | 28 |
|*2 |   TABLE ACCESS FULL                    | SALES          |13 | 28 |
------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
   2 - access("PROD_ID"=38)
In the preceding example, the query accesses 16 partitions. On 15 of these partitions, an index is available, but no index is available for the final partition. Because the optimizer has to choose one access path or the other, the optimizer cannot use the index on any of the partitions.

With table expansion, the optimizer rewrites the original query as follows:


Copy
SELECT * 
FROM   sales 
WHERE  time_id >= TO_DATE('2000-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS') 
AND    time_id <  TO_DATE('2003-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS')
AND    prod_id = 38
UNION ALL
SELECT * 
FROM   sales 
WHERE  time_id >= TO_DATE('2003-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS') 
AND    time_id < TO_DATE('2004-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS')
AND    prod_id = 38;
In the preceding query, the first query block in the UNION ALL accesses the partitions that are indexed, while the second query block accesses the partition that is not. The two subqueries enable the optimizer to choose to use the index in the first query block, if it is more optimal than using a table scan of all of the partitions that are accessed.

Query the plan using DBMS_XPLAN.

The plan appears as follows:


Copy
Plan hash value: 2120767686
 
------------------------------------------------------------------------
|Id| Operation                                   |Name    |Pstart|Pstop|
------------------------------------------------------------------------
| 0|SELECT STATEMENT                             |              |  |   |
| 1| VIEW                                        |VW_TE_2       |  |   |
| 2|  UNION-ALL                                  |              |  |   |
| 3|   PARTITION RANGE ITERATOR                  |              |13| 27|
| 4|    TABLE ACCESS BY LOCAL INDEX ROWID BATCHED|SALES         |13| 27|
| 5|     BITMAP CONVERSION TO ROWIDS             |              |  |   |
|*6|      BITMAP INDEX SINGLE VALUE              |SALES_PROD_BIX|13| 27|
| 7|   PARTITION RANGE SINGLE                    |              |28| 28|
|*8|    TABLE ACCESS FULL                        |SALES         |28| 28|
------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   6 - access("PROD_ID"=38)
   8 - filter("PROD_ID"=38)
As shown in the preceding plan, the optimizer uses a UNION ALL for two query blocks (Step 2). The optimizer chooses an index to access partitions 13 to 27 in the first query block (Step 6). Because no index is available for partition 28, the optimizer chooses a full table scan in the second query block (Step 8).